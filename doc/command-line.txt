To enable option, write `option+` or just `option`; to disable: `option-`.
By default, all switches are disabled.

1.Compiler
	-bytecode / -b <file>	saves generated verbal bytecode into specified file
	-output / -o <file>	changes output file name

	-includepath <path>	changes the include path; default: `$file;$compiler`

2.Code
	--compile-mode / -Cm <mode>
		-Cm app		compiles file as an application (default)
		-Cm lib		compiles file as a library
		-Cm bytecode	compiles file as a bytecode
		-Cm libinfo	enables library info mode (see point 6. below)

	--internal-const / -iconst	enable special (internal) constants like `__self` and `__line`

3.Optimizations
	--register-alloc / -Or		enables advanced register allocator
	--constant-folding / -Of	enables constant expression folding
	--tree-simplify / -Ot		simplifies expression trees (eg.`x = x+y;` is simplified to `x += y;`)
	--bytecode-optimize / -Op	optimizes output bytecode
	--remove-dead / -Ou		tries to remove unreachable (dead) parts of code (eg.code after `return`) and unused variables; it works the best combined with `--optimize-branches`
	--short-circuit	/ -Os		enables/disables short-circuit-evalution. It is implicitly **enabled** and most likely you don't want to turn it off.

	--constant-propagation / -Oc	enables constant propagation (it's a bit expensive operation)

	--optimize-branches / -Ob	optimizes condition jumps (it's an expensive optimization; it works the best combined with `--constant-folding` and `--remove-dead`, otherwise it's almost useless)

	-O1	enables `--register-alloc`, `--constant-folding`, `--tree-simplify` and `--bytecode-optimize`
	-O2	enables `-O1`, `--remove-dead` and `--constant-propagation`
	-O3	enables `-O2` and `--optimize-branches`

4.Debug
	--strip-debug / -Sd	strips debug symbols from the file (but do not removes debug symbols from eg.linked libraries)
	--dump-cfg		dumps CFG graphs in 'DOT' file format into 2 directories: `optimized` and `not_optimized`. Use only for compiler debugging, as it will generate a lots of files (2*number of compiled functions)!

5.Other options
	-wait		waits for `enter` key when finished
	-silent		doesn't display any unnecessary messages (like compiler version) except hints/warnings/errors
	-verbose / -v	enables `verbose` mode
	-devlog	/ -vv	shows devlog (even more information about the compilation process; useful only in compiler debugging)

6.Library information mode.
	To get list of all public symbols located inside some library, "--compile-mode libinfo" construction should be used.
	Eg.: compiler library.ssm --Cm libinfo

	Output is generated in format:
		namespace namespace_name
	And then all symbols which belong to that namespace:
		symbol kind; name=symbol name; other symbol traits;

	Traits depend of symbol kind:
	For functions: "return" (return type name), "parameter_count" and "parameter_types" (names of each function parameters' types separated by a comma)
	For variables: "type" (type name)

	Eg.:
		namespace Foo
		constant; name=something;
		var; name=separator; type=Bar::my_type;
		function; name=hello; return=self::void; parameter_count=0; parameter_types=;
		function; name=world; return=self::void; parameter_count=0; parameter_types=;
		function; name=sum; return=self::int; parameter_count=2; parameter_types=self::int, self::int;

	The output 'range markers' are "libinfo begin" and "libinfo end", ie.:
		libinfo begin
		(all the "namespace" (...) data is here)
		libinfo end

	If exception occurs during the parsing of library (file couldn't have been found or it's corrupted), a message is generated:
		libinfo exception
		(exception message here)
	And further parsing stops.